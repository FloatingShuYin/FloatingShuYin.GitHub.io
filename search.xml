<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[正则表达式语法一览]]></title>
    <url>%2F2017%2F10%2F31%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E4%B8%80%E8%A7%88%2F</url>
    <content type="text"><![CDATA[说在前面的话 此文档是我学习正则表达式语法时候的练习笔记 此文档内容来自MDN Web docs的JavaScript指南-正则表达式。JavaScript中的正则表达式正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、replace、search 和 split 方法。本章介绍 JavaScript正则表达式。 创建一个正则表达式可以使用以下两种方法之一构建一个正则表达式： 使用一个正则表达式字面量，其由包含在斜杠之间的模式组成，如下所示：1234567/* /pattern/flags*/const regex = /ab+c/;const regex = /^[a-zA-Z]+[0-9]*\W?_$/gi; 在加载脚本后，正则表达式字面值提供正则表达式的编译。当正则表达式保持不变时，使用此方法可获得更好的性能。 或者调用 RegExp 对象的构造函数，如下所示：123456789/* new RegExp(pattern[,flags])*/// 下面这三种传参方式都是可以的let regex = new RegExp("ab+c");let regex = new RegExp(/^[a-zA-Z]+[0-9]*\\W?_$/,"gi");let regex = new RegExp("^[a-zA-Z]+[0-9]*\\W?_$", "gi"); 当你知道正则表达式模式将会改变，或者你不知道模式，并从另一个来源，如用户输入的时候，就可以选择使用RegExp对象构造函数使用构造函数提供的正则表达式将在运行时编译。 编写一个正则表达式的模式一个正则表达式模式是由简单的字符所构成的，比如/abc/, 或者是简单和特殊字符的组合，比如 /ab*c/或 /Chapter (\d+)\.\d*/。后者用到了括号，它在正则表达式中可以被用作是一个 记忆设备 。这一部分正则所匹配的字符将会被记住，在后面可以被利用。正如使用 括号的子字符串匹配 使用简单的模式 简单的模式是由你找到的直接匹配所构成的。比如，/abc/这个模式就匹配了在一个字符串中，仅仅字符 &#39;abc&#39; 同时出现并按照这个顺序。在匹配字符串&quot;Hi, do you know your abc&#39;s?&quot;和 &quot;The latest airplane designs evolved from slabcraft.&quot; 的时候，就会匹配成功。在上面的两个实例中，匹配的是子字符串 &#39;abc&#39;。而在字符串 &quot;Grab crab&quot;中将不会被匹配，因为它不包含任何的 &#39;abc&#39; 子字符串。使用特殊字符 当你需要搜索一个比直接匹配需要更多条件的匹配时，比如寻找一个或多个 ‘b’，或者寻找空格，那么这时模式将要包含特殊字符。比如， 模式/ab*c/匹配了一个单独的 ‘a’ 后面跟了零个或者多个 ‘b’（*的意思是前面一项出现了零个或者多个），且后面跟着 ‘c’ 的任何字符组合。在字符串 “cbbabbbbcdebc” 中，这个模式匹配了子字符串 “abbbbc”。 下面的表格列出了一个我们在正则表达式中可以利用的特殊字符的完整列表和描述。 表 4.1 正则表达式中的特殊字符将用户输入转义为正则表达式中的一个字面字符串, 可以通过简单的替换来实现：1234function escapeRegExp(string)&#123; return string.replace(/([.*+?^=!:$&#123;&#125;()|[\]\/\\])/g, "\\$&amp;"); //$&amp;表示整个被匹配的字符串&#125; 使用插入语任何正则表达式的插入语都会使这部分匹配的副字符串被记忆。一旦被记忆，这个副字符串就可以被调用于其它用途，如同 使用括号的子字符串匹配之中所述。 比如， /Chapter (\d+)\.\d*/ 解释了额外转义的和特殊的字符，并说明了这部分pattern应该被记忆。它精确地匹配后面跟着一个以上数字字符的字符 &#39;Chapter &#39; (\d 意为任何数字字符，+ 意为1次以上)，跟着一个小数点（在这个字符中本身也是一个特殊字符；小数点前的 \ 意味着这个pattern必须寻找字面字符 ‘.’)，跟着任何数字字符0次以上。 (\d 意为数字字符， * 意为0次以上)。另外，插入语也用来记忆第一个匹配的数字字符。 此模式可以匹配字符串&quot;Open Chapter 4.3, paragraph 6&quot;，并且&#39;4&#39;将会被记住。此模式并不能匹配&quot;Chapter 3 and 4&quot;，因为在这个字符串中&#39;3&#39;的后面没有点号&#39;.&#39;。 括号中的&quot;?:&quot;，这种模式匹配的子字符串将不会被记住。比如，(?:\d+)匹配一次或多次数字字符，但是不能记住匹配的字符 使用正则表达式正则表达式可以被用于RegExp的exec和test方法以及 String的match、replace、search和split方法。这些方法在JavaScript 手册中有详细的解释。 表 4.2 使用正则表达式的方法 方法 描述 exec 一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回null）。 test 一个在字符串中测试是否匹配的RegExp方法，它返回true或false。 match 一个在字符串中执行查找匹配的String方法，它返回一个数组或者在未匹配到时返回null。 search 一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。 replace 一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。 split 一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的String方法。 当你想要知道在一个字符串中的一个匹配是否被找到，你可以使用test或search方法；想得到更多的信息（但是比较慢）则可以使用exec或match方法。如果你使用exec或match方法并且匹配成功了，那么这些方法将返回一个数组并且更新相关的正则表达式对象的属性和预定义的正则表达式对象（详见下）。如果匹配失败，那么exec方法返回null（也就是false）。 在接下来的例子中，脚本将使用exec方法在一个字符串中查找一个匹配12var myRe = /d(b+)d/g;var myArray = myRe.exec("cdbbdbsbz"); 如果你不需要访问正则表达式的属性，这个脚本通过另一个方法来创建myArray：1var myArray = /d(b+)d/g.exec("cdbbdbsbz"); 如果你想通过一个字符串构建正则表达式，那么这个脚本还有另一种方法：12var myRe = new RegExp("d(b+)d", "g");var myArray = myRe.exec("cdbbdbsbz"); 通过这些脚本，匹配成功后将返回一个数组并且更新正则表达式的属性，如下表所示。 表 4.3 正则表达式执行返回信息 对象 属性或索引 描述 在例子中对应的值 myArray 匹配到的字符串和所有被记住的子字符串。 [&quot;dbbd&quot;, &quot;bb&quot;] index 在输入的字符串中匹配到的以0开始的索引值。 `1 input 初始字符串。 &quot;cdbbdbsbz&quot; [0] 匹配到的所有字符串（并不是匹配后记住的字符串）。注：原文”The last matched characters.”，应该是原版错误。匹配到的最后一个字符索引。 &quot;dbbd&quot; myRe lastIndex 下一个匹配的索引值。（这个属性只有在使用g参数时可用在 通过参数进行高级搜索 一节有详细的描述.) 5 source 模式文本。在正则表达式创建时更新，不执行。 &quot;d(b+)d&quot; 在这个例子中如第二种形式所示，你可以使用一个正则表达式创建一个没有分配给变量的对象初始化容器。如果你这样做，那么，每一次使用时都好比在使用一个新的正则表达式。因为这个原因，如果你使用这个未分配给一个变量的正则表达式，你将在随后不能访问这个正则表达式的属性。例如，假如你有如下脚本：123var myRe = /d(b+)d/g;var myArray = myRe.exec("cdbbdbsbz");console.log("The value of lastIndex is " + myRe.lastIndex); 这个脚本输出如下： The value of lastIndex is 5 然而，如果你有如下脚本：12var myArray = /d(b+)d/g.exec("cdbbdbsbz");console.log("The value of lastIndex is " + /d(b+)d/g.lastIndex); 它显示为： The value of lastIndex is 0 当发生/d(b+)d/g使用两个不同状态的正则表达式对象，lastIndex属性会得到不同的值。如果你需要访问一个正则表达式的属性，则需要创建一个对象初始化生成器，你应该首先把它赋值给一个变量。使用括号的子字符串匹配 一个正则表达式模式使用括号，将导致相应的子匹配被记住。例如，/a(b)c /可以匹配字符串“abc”，并且记得“b”。回调这些括号中匹配的子串，使用数组元素[1],……[n]。 使用括号匹配的子字符串的数量是无限的。返回的数组中保存所有被发现的子匹配。下面的例子说明了如何使用括号的子字符串匹配。 下面的脚本使用replace()方法来转换字符串中的单词。在匹配到的替换文本中，脚本使用替代的$ 1,$ 2表示第一个和第二个括号的子字符串匹配。1234var re = /(\w+)\s(\w+)/;var str = "John Smith";var newstr = str.replace(re, "$2, $1");console.log(newstr); 这个表达式输出 &quot;Smith, John&quot;。 通过标志进行高级搜索正则表达式有四个可选参数进行全局和不分大小写搜索。这些参数既可以单独使用也可以一起使用在任何顺序和包含正则表达式的部分中。 正则表达式标志 标志 描述 g 全局搜索。 i 不区分大小写搜索。 m 多行搜索。 y 执行“粘性”搜索,匹配从目标字符串的当前位置开始，可以使用y标志。 包含一个标志的正则表达式，使用这个表达式：1var re = /pattern/flags; 或者1var re = new RegExp("pattern", "flags"); 值得注意的是，标志是一个正则表达式的一部分，它们在接下来的时间将不能添加或删除。 例如，re = /\w+\s/g 将创建一个查找一个或多个字符后有一个空格的正则表达式，或者组合起来像此要求的字符串。1234var re = /\w+\s/g;var str = "fee fi fo fum";var myArray = str.match(re);console.log(myArray); 这段代码将输出[&quot;fee &quot;, &quot;fi &quot;, &quot;fo &quot;]。在这个例子中，你可以将： var re = /\w+\s/g; 替换成： var re = new RegExp(&quot;\\w+\\s&quot;, &quot;g&quot;); 并且能获取到相同的结果。 m标志用于指定多行输入字符串应该被视为多个行。如果使用m标志，^和$匹配的开始或结束输入字符串中的每一行，而不是整个字符串的开始或结束。例子Edit 以下例子说明了一些正值表达式的用途。 改变输入字符串的顺序以下例子解释了正值表达式的构成和string.split() 以及 string.replace()的用途。它会整理一个只有粗略格式的含有全名（名字首先出现）的输入字符串，这个字符串被空格、换行符和一个分号分隔。最终，它会颠倒名字顺序（姓氏首先出现）和list的类型。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758// The name string contains multiple spaces and tabs,// and may have multiple spaces between first and last names.var names = "Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ; Chris Hand ";var output = ["---------- Original String\n", names + "\n"];// Prepare two regular expression patterns and array storage.// Split the string into array elements.// pattern: possible white space then semicolon then possible white spacevar pattern = /\s*;\s*/;// Break the string into pieces separated by the pattern above and// store the pieces in an array called nameListvar nameList = names.split(pattern);// new pattern: one or more characters then spaces then characters.// Use parentheses to "memorize" portions of the pattern.// The memorized portions are referred to later.pattern = /(\w+)\s+(\w+)/;// New array for holding names being processed.var bySurnameList = [];// Display the name array and populate the new array// with comma-separated names, last first.//// The replace method removes anything matching the pattern// and replaces it with the memorized string—second memorized portion// followed by comma space followed by first memorized portion.//// The variables $1 and $2 refer to the portions// memorized while matching the pattern.output.push("---------- After Split by Regular Expression");var i, len;for (i = 0, len = nameList.length; i &lt; len; i++)&#123; output.push(nameList[i]); bySurnameList[i] = nameList[i].replace(pattern, "$2, $1");&#125;// Display the new array.output.push("---------- Names Reversed");for (i = 0, len = bySurnameList.length; i &lt; len; i++)&#123; output.push(bySurnameList[i]);&#125;// Sort by last name, then display the sorted array.bySurnameList.sort();output.push("---------- Sorted");for (i = 0, len = bySurnameList.length; i &lt; len; i++)&#123; output.push(bySurnameList[i]);&#125;output.push("---------- End");console.log(output.join("\n")); 用特殊字符检验输入在以下例子中，我们期望用户输入一个电话号码。当用户点击“Check”按钮，我们的脚本开始检查这些数字是否合法。如果数字合法（匹配正值表达式所规定的字符序列），脚本显示一条感谢用户的信息并确认该数字。如果这串数字不合法，脚本提示用户电话号码不合法。. 包含非捕获括号 (?: 这个正值表达式寻找三个数字字符\d{3} 或者 | 一个左半括号(跟着三位数字\d{3}, 跟着一个封闭括号 ), (结束非捕获括号 ))， 后跟着一个短破折号或左斜杠或小数点，随后跟随三个数字字符，当记忆字符 ([-\/.])捕获并记住，后面跟着三位小数 \d{3}，再后面跟随记住的左斜杠、右斜杠或小数点 \1，最后跟着四位小数 \d{4}。 当用户按下Enter设置RegExp.input，这些变化也能被激活。 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&gt; &lt;meta http-equiv="Content-Script-Type" content="text/javascript"&gt; &lt;script type="text/javascript"&gt; var re = /(?:\d&#123;3&#125;|\(\d&#123;3&#125;\))([-\/\.])\d&#123;3&#125;\1\d&#123;4&#125;/; function testInfo(phoneInput) &#123; var OK = re.exec(phoneInput.value); if (!OK) window.alert(phoneInput.value + ' isn\'t a phone number with area code!'); else window.alert('Thanks, your phone number is ' + OK[0]); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Enter your phone number (with area code) and then click "Check". &lt;br&gt;The expected format is like ###-###-####.&lt;/p&gt; &lt;form action="#"&gt; &lt;input id="phone"&gt;&lt;button onclick="testInfo(document.getElementById('phone'));"&gt;Check&lt;/button&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; Todo]]></content>
      <categories>
        <category>笔记</category>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>JavaScript</tag>
        <tag>正则表达式语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript算法汇总]]></title>
    <url>%2F2017%2F10%2F31%2FJavaScript%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[转换HTML实体（Convert HTML Entities） 将字符串中的字符 &amp;、&lt;、&gt;、&quot; （双引号）, 以及 &#39; （单引号）转换为它们对应的 HTML 实体。12345678910111213141516171819function convert(str) &#123; // &amp;colon;&amp;rpar; // 声明一个存储字符与其对应的HTML实体代码的对象 var entityMap = &#123; '&amp;': '&amp;amp;', '&lt;': '&amp;lt;', '&gt;': '&amp;gt;', '\"': '&amp;quot;', '\'': '&amp;apos;', &#125;; //使用string的replace方法，将用正则匹配到的字符替换成entityMap对象中相对应的的属性值 return str.replace(/[&amp;&lt;&gt;"']/g,function(matched)&#123; return entityMap[matched]; &#125;);&#125;convert("Dolce &amp; Gabbana"); 可以在下面这个网站查询到符号对应的HTML实体代码 Character Entity Reference Chart 判断素数 (isPrimes?)123456789101112131415161718192021222324function sumPrimes(num) &#123; var tem = num; num =0; // 声明一个最基础的素数数组 var primeNumber = [2]; // 判断从3到num 之间的所以整数，将其中的素数添加到素数数组中。 for(var i = 3; i &lt;= tem; i++)&#123; // Array(i + 1).join.('1') 将i+1的值转换为由i个1组成的字符串：1111111. // 通过test()来判断 正则表达式/^.?$|^(..+?)\1+$/是否匹配成功 /* /^.?$|^(..+?)\1+$/ 匹配子字符串'1' 在字符串 Array(i + 1).join('1'))中的次数不为素数次*/ if( !/^.?$|^(..+?)\1+$/.test(Array(i + 1).join('1')))&#123; primeNumber.push(i); &#125; &#125; // 迭代累积素数数组，得到它们的和 for(var x = 0; x &lt; primeNumber.length; x++)&#123; num += primeNumber[x]; &#125; return num;&#125;sumPrimes(10); 关于正则表达式，也许这能解释一二正则表达式 ^(?!(xx+)\1+$) 的含义？]]></content>
      <categories>
        <category>笔记</category>
        <category>JavaScript算法汇总</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[语录]]></title>
    <url>%2F2017%2F10%2F26%2F%E8%AF%AD%E5%BD%95%2F</url>
    <content type="text"><![CDATA[(FloatingShuYin@2017-10-26 15:01:20)永远不要轻易去尝试走入别人的世界。(FloatingShuYin@2017-10-29 15:39:38)欲望是第一原动力。(FloatingShuYin@2017-10-30 20:41:01)真正的鸡汤不是给你虚构美好的未来，而是让你看清不努力的结果。]]></content>
      <categories>
        <category>语录</category>
      </categories>
      <tags>
        <tag>语录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[致敬乔布斯]]></title>
    <url>%2F2017%2F10%2F24%2F%E8%87%B4%E6%95%AC%E4%B9%94%E5%B8%83%E6%96%AF%2F</url>
    <content type="text"><![CDATA[史蒂夫·乔布斯 美国苹果公司联合创始人 上图是乔布斯在斯坦福大学演讲 这是乔布斯的生平: 1955年 史蒂夫·乔布斯出生在美国旧金山。刚刚出世就被父母遗弃了。幸运的是,一对好心的夫妻领养了他.乔布斯生活在美国“硅谷“附近，邻居都是惠普公司的职员。在这些人的影响下，乔布斯从小迷恋电子学。上初中时，乔布斯在一次同学聚会上与斯蒂夫·沃兹尼亚克见面，两人一见如故。斯蒂夫·沃兹尼亚克是学校电子俱乐部的会长，对电子有很大的兴趣. 1974年 乔布斯只念了一学期就因为经济因素而休学，成为雅达利电视游戏机公司的一名职员。借住沃兹家的车库，常到社区大学旁听书法课等课程。 1976年 在旧金山威斯康星计算机产品展销会上买到了6502芯片，带着6502芯片，乔布斯和沃兹尼亚克在乔布斯家的车库里装好了第一台电脑。乔布斯为筹集批量生产的资金，卖掉了自己的大众牌小汽车，同时沃兹也卖掉了他的惠普65型计算器。就这样，他们有了1300美元。 1976年4月 乔布斯、沃兹及乔布斯的朋友龙·韦恩签署了一份合同，决定成立一家电脑公司。随后，21岁的乔布斯与26岁的斯蒂夫·沃兹尼亚克在自家的车房里成立了苹果公司。公司的名称由乔布斯定为苹果。而他们的自制电脑则被追认为“苹果Ⅰ号“电脑了。苹果公司成立初期，“苹果“机的生意清淡。 1976年7月 一个偶然的机遇给“苹果“公司带来了转机。零售商保罗·特雷尔（Paul Jay Terrell）来到了乔布斯的车库，当看完乔布斯演示完电脑后，决定订购50台整机，这是做成的第一笔生意。之后“苹果“公司开始了小批量生产。 1976年10月 马尔库拉前来拜访沃兹和他们的车库工场。马尔库拉是位电气工程师，擅长推销工作，他主动帮助他们制定一份商业计划，给他们贷款69万美元，有了这笔资金，“苹果“公司的发展速度大大加快了。 1977年4月 乔布斯在美国第一次计算机展览会展示了苹果Ⅱ号样机。 1980年12月 苹果公司股票公开上市，在不到一个小时内，460万股全被抢购一空，当日以每股29美元收市。按这个收盘价计算，苹果公司高层产生了4名亿万富翁和40名以上的百万富翁。乔布斯作为公司创办人排名第一。 1983年 Lisa数据库和Apple Iie发布，售价分别为9998美元和1395美元。但是Lisa的昂贵的售价是没有多少市场的，而Lisa又侵吞了Apple大量研发经费。由于乔布斯经营理念与当时大多数管理人员不同，加上IBM公司推出个人电脑，抢占大片市场，总经理和董事们便把这一失败归罪于董事长乔布斯 1985年4月 董事会决议撤销了他的经营大权。乔布斯几次想夺回权力均未成功，便在1985年9月17日离开苹果公司。 1986年 乔布斯花1000万美元从乔治·卢卡斯手中收购了Lucasfilm旗下位于加利福尼亚州Emeryville的电脑动画效果工作室，并成立独立公司皮克斯动画工作室。之后该公司成为了众所周知的3D电脑动画公司 1995年 推出全球首部全3D立体动画电影《玩具总动员》。公司在2006年被迪士尼收购，乔布斯也因此成为迪斯尼最大个人股东。 1996年 苹果公司经营陷入困局，其市场份额也由鼎盛的16%跌到4%。与之相对应的是乔布斯公司由于《玩具总动员》而名声大振，个人身价达到10亿美元。但是乔布斯还是于苹果危难之中重新回来，回来后的乔布斯大刀阔斧改革，停止了不合理的研发和生产，结束了微软和苹果多年的专利纷争，并开始研发新产品iMac和OS X操作系统。 1997年 苹果推出iMac，创新的外壳颜色透明设计使得产品大卖，并让苹果度过财政危机。随后苹果又推出Mac OS X操作系统。 2000年 科技股泡沫，乔布斯又提出将PC设计成“数字中枢“先进理念，并先后开发出iTunes和iPod，同时也开始在黄金地段开设专卖店并大获成功。随后Apple TV和iTunes Store等一系列产品受到了市场的好评和认可。 2007年6月 苹果公司又推出自有设计的iPhone手机，使用iOS系统，随后发布新一代iPhone 3G以及iPhone 3GS。 2010年6月 发布第四代产品iPhone 4，每次上市都引得了世界极大的疯狂和销售热潮。 除了iPhone系列之外，发布使用iOS系统的iPad平板电脑，这一起先不被众人看好的产品，最后获得了巨大的成功。 2011年8月24日 史蒂夫·乔布斯向苹果董事会提交辞职申请。他还在辞职信中建议由首席营运长蒂姆·库克接替他的职位。乔布斯在辞职信中表示，自己无法继续担任行政总裁，不过自己愿意担任公司董事长、董事或普通职员。苹果公司股票暂停盘后交易。乔布斯在信中并没有指明辞职原因，但他一直都在与胰腺癌作斗争。 2011年8月25日 苹果宣布他辞职，并立即生效，职位由蒂姆·库克接任。同时苹果宣布任命史蒂夫·乔布斯为公司董事长，蒂姆·库克担任CEO。 2011年10月5日 苹果董事会宣布前行政总裁乔布斯逝世，，终年56岁，葬礼于10月7日举行。 关于乔布斯在斯坦福大学演讲视频，你可以在这看到他 乔布斯斯坦福大学演讲（高清 中英文字幕）. coded by Quincy Larson.]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>乔布斯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Makedown语法一览]]></title>
    <url>%2F2017%2F10%2F22%2FMakedown%E8%AF%AD%E6%B3%95%E4%B8%80%E8%A7%88%2F</url>
    <content type="text"><![CDATA[去Makedown语法说明。 去繁体版 看看繁体版的原始檔:来自GitHub 下载本文的原始档:来自微云网盘的分享 写在前面的话 此文档是我学习Makedown语法时候的练习笔记 参考自 Makedown语法说明 此文档内容来自Makedown语法说明。 代码引用 先看如何在Makedown中插入代码 如果要标记一小段行内代码，就需要用反引号把它包起来 反引号就是ESC下面的那个键，值得注意的是要在半角（英文）模式下输入。 例如：使用`document.write(Hello World!)`让浏览器输出Hell World!的字符。解析成的HTML代码为：&lt;p&gt;使用&lt;code&gt;document.write(Hello World!)&lt;/code&gt;让浏览器输出Hell World!的字符。&lt;/p&gt; 可以看到的被反引号包裹起来的代码将解析插入到HTML的&lt;code&gt;&lt;/code&gt;标签中 因此就可以让浏览器渲染用反引号包裹起来的代码 让代码看起来是这样：document.write(Hello World!) 如果需要插入多行代码的话就需要至少3个反引号把代码块包起来 例如： 123456```sayhello:function()&#123; document.write(Hello World!)&#125;sayhello()``` 效果显示：1234sayhello:function()&#123; document.write(Hello World!)&#125;sayhello() 如果要在代码区段内插入反引号，可以用多个反引号来开始和结束代码区段： 1``There is a literal backtick (`) here.`` 解析成的HTML代码为：&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt; 效果显示： There is a literal backtick (`) here. 而如果需要像我这样演示在代码中插入反引号而不被解析的话，像这样： 12A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` `` 只需要在代码前后输入（不想被解析的反引号的个数+1）个反引号 也就是说想让浏览器显示出这样的效果： 12A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` `` 就需要在md文档中写入 1234```A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` ````` 在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体 这让插入 HTML 原始码变得非常容易，Markdown 会把下面这段： Please don&#39;t use any `&lt;blink&gt;` tags.解析成&lt;p&gt;Please don&#39;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;可以这样写：`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.以产生&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt; 正文兼容 HTML 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。 要制约的只有一些 HTML 区块元素 比如&lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt;等标签 必须在前后加上空行与其它内容区隔开 还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。 例子如下： 这是一个普通段落。1234567 开头的↑上面要有空行&lt;table&gt; &lt;tr&gt; &lt;td&gt;*Foo*&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 结尾的↓下面要有空行 这是另一个普通段落。 在 HTML 区块 标签间的 Markdown 格式语法不会被处理。 比如，在 HTML 区块内使用 Markdown 样式的”-“是不会起作用的 值得注意的是我在区块标签中使用 强调 是有作用的 而我看的Makedow文档说不起作用？莫非有玄学加成？ 可能是解析层面做了一些处理，不深究他→ 强调 例子如下： 12345&lt;p style=&quot;color: #fc9f4d&quot;&gt; - *我是要被强调的* - 可以看到在p这个区块标签中Makedown语法 *强调* 依旧起作用 - 但是“-”语法却没有起作用，被原原本本的输出来了&lt;/p&gt; 显示效果： - 我是要被强调的 - 可以看到在p这个区块标签中Makedown语法 强调 依旧起作用 - 但是“-”语法却没有起作用，被原原本本的输出来了 HTML 的区段（行内）标签可以在 Markdown 的段落、列表或是标题里随意使用。 如 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt; 举例说明： 可以直接使用HTML 的 &lt;a&gt; 或 &lt;img&gt; 这些标签 而不用 Markdown 提供的链接或是图像标签语法。 和处在 HTML 区块 标签间不同，Markdown 语法在 HTML 区段 标签间是有效的。 代码如下： 123456&lt;span&gt;- *我要被Makedown语法强调*- 我是第二段- 可以看到的，这个“-”Makedown语法被解析渲染了- 所以在 *区段* 标签中是支持使用Makedown语法的&lt;/span&gt; 显示效果： 我要被Makedown语法强调 我是第二段 可以看到的，这个“-”Makedown语法被解析渲染了 所以在 区段 标签中是支持使用Makedown语法的 特殊字符自动转换 在 传统HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体。 如果只是想要显示这些字符的原型，必须要使用实体的形式，像是&amp;lt; 和 &amp;amp; 但是 在 Makedown中 你可以很自然的书写字符 在 Makedown 中，如果你使用的 &amp;字符是 HTML 字符实体的一部分,它会保留原状， 否则它会被转换成 &amp;amp;。 例如： 如果要在文档中插入一个版权符号，可以这样写：&amp;copy; Markdown 会保留它不动。而若你写：AT&amp;T Markdown 就会将它转为：AT&amp;amp;T &lt;符号同样，如果是把 &lt; 符号作为 HTML 标签的定界符使用 那 Markdown 也不会对它做任何转换 但是如果你写：4 &lt; 5 Markdown 将会把它转换为：4 &amp;lt; 5 值得注意的是，在code范围内,不论是行内还是区块&lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体 这项特性让你可以很容易地用 Markdown 写 HTML code 例子如下： 12345&lt;p style="text-align: center;color: #9e7a7a"&gt;问刘十九白&amp;nbsp;居&amp;nbsp;易绿蚁新醅酒&lt;/br&gt;红泥小火炉&lt;/br&gt;晚来天欲雪&lt;/br&gt;能饮一杯无&lt;/p&gt; 显示效果: 问刘十九白&nbsp;居&nbsp;易绿蚁新醅酒红泥小火炉晚来天欲雪能饮一杯无 区块元素段落和换行 一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。 空行的定义是显示上看起来像是空的，便会被视为空行。 比方说，若某一行只包含空格和制表符，则该行也会被视为空行 普通段落不该用空格或制表符来缩进。 「由一个或多个连续的文本行组成」这句话其实暗示了Markdown允许段落内的强迫换行（插入换行符） 这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项） 其它的格式会把每个换行符都转成 标签。 如果你确实想要依赖 Markdown 来插入 标签的话，在插入处先按入两个以上的空格然后回车。 标题 Markdown 支持两种标题的语法:类 Setext 和类 atx 形式。-类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： This is an H1=============This is an H2————- 任何数量的 = 和 - 都可以有效果。 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如： # 这是 H1## 这是 H2###### 这是 H6 你可以选择性地「闭合」类atx样式的标题，这纯粹只是美观用的若是觉得这样看起来比较舒适,你就可以在行尾加上 #而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）： # 这是 H1 ### 这是 H2 ##### 这是 H3 ###### 区块引用 Blockquotes Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ： > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, > consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. > Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. > > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse > id sem consectetuer libero luctus adipiscing. 这是效果 This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ： > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： > This is the first level of quoting. > > > This is nested blockquote. > > Back to the first level. 这是效果 This is the first level of quoting. This is nested blockquote. Back to the first level. 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： > #### 在引用的区块内测试使用标题 > > 1. 这是第一行列表项。 > 2. 这是第二行列表项。 > > 给出一些例子代码： > > return shell_exec("echo $input | $markdown_script"); 这是效果 在引用的区块内测试使用标题 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： return shell_exec(&quot;echo $input | $markdown_script&quot;); 任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。 列表 Markdown 支持有序列表和无序列表。-无序列表使用星号、加号或是减号作为列表标记： * Red * Green * Blue 等同于 + Red + Green + Blue 也等同于 - Red - Green - Blue 这是效果 Red Green Blue 有序列表则使用数字接着一个英文句点： 1. Bird 2. McHale 3. Parish 很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为： &lt;ol&gt; &lt;li&gt;Bird&lt;/li&gt; &lt;li&gt;McHale&lt;/li&gt; &lt;li&gt;Parish&lt;/li&gt; &lt;/ol&gt; 如果你的列表标记写成： 1. Bird 1. McHale 1. Parish 或甚至是 2. Bird 1. McHale 8. Parish 你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。 如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 要让列表看起来更漂亮，你可以把内容用固定的缩进整理好： 12345- Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.- Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 效果 Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing. 但是如果你懒，那也行： 12345- Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.- Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing. 效果是一样的 Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing. 如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 &lt;p&gt; 标签包起来，举例来说: 12- Bird- Magic 会被转换为：1234&lt;ul&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;Magic&lt;/li&gt;&lt;/ul&gt; 但是这个：123- Bird- Magic 会被转换为：1234&lt;ul&gt;&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt; 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符： 1234567891. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.2. Suspendisse id sem consectetuer libero luctus adipiscing. 如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许： 1234567- This is a list item with two paragraphs. This is the second paragraph in the list item. You&apos;reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.- Another item in the same list. 效果： This is a list item with two paragraphs. Lorem ipsum dolorsit amet, consectetuer adipiscing elit. Aliquam hendreritmi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreetvitae, risus. Donec sit amet nisl. Aliquam semper ipsumsit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 如果要在列表项目内放进引用，那 &gt; 就需要缩进： 1234- A list item with a blockquote: &gt; This is a blockquote &gt; inside a list item. 效果： A list item with a blockquote: This is a blockquoteinside a list item. 如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符： 123- 一列表项包含一个列表区块： &lt;代码写在这&gt; 实例效果： 一列表项包含一个列表区块：sayhello:function(){ document.write(Hello World!) } sayhello() 当然，项目列表很可能会不小心产生，像是下面这样的写法： 1986. What a great season. 换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。 1986\. What a great season. 代码区块 和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 和 标签来把代码区块包起来。 要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入： 这是一个普通段落： 这是一个代码区块。 Markdown 会转换成： &lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt; &lt;code&gt; 这是一个代码区块。 &lt;/code&gt; &lt;/pre&gt; 这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如： Here is an example of AppleScript: tell application &quot;Foo&quot; beep end tell 会被转换为: &lt;p&gt;Here is an example of AppleScript:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot; beep end tell &lt;/code&gt;&lt;/pre&gt; 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体 这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码 只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如： &lt;div class=&quot;footer&quot;&gt; &amp;copy; 2004 Foo Corporation &lt;/div&gt; 会被转换为： &lt;pre&gt; &lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt; &amp;amp;copy; 2004 Foo Corporation &amp;lt;/div&amp;gt; &lt;/code&gt; &lt;/pre&gt; 代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。 分隔线 你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： * * * *** ***** - - - --------------------------------------- 效果如下： 区段元素链接Markdown 支援兩種形式的連結語法： 行內和參考兩種形式。不管是哪一种，链接文字都是用 [方括号] 来标记。要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如： This is [an example](http://example.com/ &quot;Title&quot;) inline link. [This link](http://example.net/) has no title attribute. 会产生： &lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt; an example&lt;/a&gt; inline link.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no title attribute.&lt;/p&gt; 如果你是要链接到同样主机的资源，你可以使用相对路径：See my [About](/about/) page for details. 参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：This is [an example][id] reference-style link.你也可以选择性地在两个方括号中间加上一个空格：This is [an example] [id] reference-style link.接着，在文件的任意处，你可以把这个标记的链接内容定义出来：[id]: http://example.com/ &quot;Optional Title Here&quot;链接内容定义的形式为： 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字 接着一个冒号 接着一个以上的空格或制表符 接着链接的网址 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着 下面这三种链接的定义都是相同： [foo]: http://example.com/ &quot;Optional Title Here&quot; [foo]: http://example.com/ &apos;Optional Title Here&apos; [foo]: http://example.com/ (Optional Title Here) 请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。链接网址也可以用方括号包起来：[id]: &lt;http://example.com/&gt; &quot;Optional Title Here&quot;你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：[id]: http://example.com/longish/path/to/resource/here &quot;Optional Title Here&quot;网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的: [link text][a] [link text][A]隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成： [Google][] 然后定义链接内容： [Google]: http://google.com/ 由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词： Visit [Daring Fireball][] for more information. 然后接着定义链接： [Daring Fireball]: http://daringfireball.net/ 链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。 下面是一个参考式链接的范例： I get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ &quot;Google&quot; [2]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [3]: http://search.msn.com/ &quot;MSN Search&quot; 如果改成用链接名称的方式写： I get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ &quot;Google&quot; [yahoo]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [msn]: http://search.msn.com/ &quot;MSN Search&quot; 上面两种写法都会产生下面的 HTML。 &lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;title=&quot;Google&quot;&gt;Google &lt;/a&gt; than from &lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt; or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;. &lt;/p&gt; 下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用： I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;) than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or [MSN](http://search.msn.com/ &quot;MSN Search&quot;). 参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。 强调Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 或 _ 包围的字词会被转成用 &lt;em&gt; 标签包围，用两个 或 _ 包起来的话，则会被转成 &lt;strong&gt;，例如： *single asterisks* _single underscores_ **double asterisks** __double underscores__ 会转成： &lt;em&gt;single asterisks&lt;/em&gt; &lt;em&gt;single underscores&lt;/em&gt; &lt;strong&gt;double asterisks&lt;/strong&gt; &lt;strong&gt;double underscores&lt;/strong&gt; 你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。强调也可以直接插在文字中间： un*frigging*believable 但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。如果要在文字前后直接插入普通的星号或底线，你可以用反斜线： \*this text is surrounded by literal asterisks\* 图片很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。行内式的图片语法看起来像是： ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 详细叙述如下： 一个惊叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。 参考式的图片语法则长得像这样： ![Alt text][id] 「id」是图片参考的名称，图片参考的定义方式则和连结参考一样： [id]: url/to/image &quot;Optional title attribute&quot; 到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 &lt;img&gt; 标签。其它 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： &lt;http://example.com/&gt; Markdown 会转为： &lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt; 邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如： &lt;address@example.com&gt; Markdown 会转成： &lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65; &amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111; &amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61; &amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt; 在浏览器里面，这段字串（其实是 &lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;）会变成一个可以点击的「address@example.com」链接。 （这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）反斜杠 Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 &lt;em&gt; 标签），你可以在星号的前面加上反斜杠： \*literal asterisks\* Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： \ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 感谢感谢 leafy7382 协助翻译，hlb、Randylien 帮忙润稿，ethantw 的汉字标准格式・CSS Reset， WM 回报文字错误。 感谢 fenprace，addv。 回到顶部 去Makedown语法说明。 去繁体版 看看繁体版的原始檔 下载本文的原始档]]></content>
      <categories>
        <category>笔记</category>
        <category>Makedown</category>
      </categories>
      <tags>
        <tag>Makedown语法</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
